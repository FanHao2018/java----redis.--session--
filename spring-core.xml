<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:p="http://www.springframework.org/schema/p"  
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:util="http://www.springframework.org/schema/util" 
    xmlns:context="http://www.springframework.org/schema/context" 
    xmlns:jaxws="http://cxf.apache.org/jaxws"        
    xmlns:cxf="http://cxf.apache.org/core"  
    xmlns:cache="http://www.springframework.org/schema/cache"  
    xsi:schemaLocation="
            http://www.springframework.org/schema/beans 
            http://www.springframework.org/schema/beans/spring-beans.xsd 
            http://www.springframework.org/schema/tx 
            http://www.springframework.org/schema/tx/spring-tx.xsd
            http://www.springframework.org/schema/context  
      		http://www.springframework.org/schema/context/spring-context.xsd
            http://www.springframework.org/schema/aop 
            http://www.springframework.org/schema/aop/spring-aop.xsd
            http://www.springframework.org/schema/util 
            http://www.springframework.org/schema/util/spring-util.xsd 
            http://cxf.apache.org/jaxws 
            http://cxf.apache.org/schemas/jaxws.xsd  
            http://cxf.apache.org/core 
            http://cxf.apache.org/schemas/core.xsd
            http://www.springframework.org/schema/cache	
            http://www.springframework.org/schema/cache/spring-cache.xsd">
            
    <!-- 
    	    Spring相关配置，包括公共的property文件加载，数据源DataSource定义,事务声明,JavaMail,等。
     -->
    <!-- 导入WebService服务配置文件 -->
    <import resource="classpath:config/core/spring-webservice.xml" /> 
    <!-- 导入Quartz Job 配置文件 -->
    <!-- <import resource="classpath:config/core/spring-quartz-job.xml" />  -->
    
	<!-- 自动扫描 Service层 -->
	<context:component-scan base-package="com.hdrs.ris.service" />
	<!-- properties配置文件 -->
	<bean id="propertyConfigurerUtil" class="com.hdrs.core.common.util.PropertyConfigurerUtil">
		<property name="ignoreUnresolvablePlaceholders" value="true" />
		<property name="ignoreResourceNotFound" value="true" />
		<property name="locations">
			<list>
				<value>classpath:config/datasource/jdbc.properties</value>
				<value>classpath:config/core/context-ris.properties</value>
			</list>
		</property>
	</bean>
	<!-- 开启缓存注解 -->
	<cache:annotation-driven cache-manager="cacheManager" />
	
	<!-- 线程池-->
    <bean name="executor" class="org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor">
        <property name="corePoolSize" value="15"/>
        <property name="maxPoolSize" value="25"/>
        <property name="queueCapacity" value="100"/>
    </bean>
	<!-- 声明cacheManager -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager" 
	p:cacheManager-ref="cacheManagerFactory" />
	
	<!-- cacheManager工厂类，指定ehcache.xml的位置 -->
	<bean id="cacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean" 
	p:configLocation="classpath:config/core/ehcache.xml" p:shared="false" />
	
	<!-- c3p0 数据库连接池配置 -->
	<bean id="dataSource" name="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="user" value="${jdbc.user}" />
		<property name="password" value="${jdbc.password}" />
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
		<property name="driverClass" value="${jdbc.driverClass}" />
		<property name="maxPoolSize" value="${jdbc.poolmax}"></property>
		<property name="minPoolSize" value="${jdbc.poolmin}"></property>
		<property name="initialPoolSize" value="${jdbc.poolinit}"></property>
		<property name="maxStatements" value="${jdbc.maxStatements}"></property>
		<property name="maxStatementsPerConnection" value="${jdbc.maxStatementsPerConnection}"></property>
		<property name="maxConnectionAge" value="${jdbc.connectionAgeMax}"></property>
		<property name="checkoutTimeout" value="${jdbc.timeOutCheck}"></property>
		<property name="testConnectionOnCheckout" value="${jdbc.testConnectionOnCheckout}"></property>
		<property name="maxIdleTime" value="${jdbc.idleTimeMax}"></property>
		<property name="maxAdministrativeTaskTime" value="${jdbc.adminTaskTimeMax}"></property>
		<property name="numHelperThreads" value="${jdbc.helperThreadsNum}"></property>
		<property name="acquireRetryAttempts" value="${jdbc.acquireRetryAttempts}"></property>
	</bean>
	<!-- JNDI方式获取数据源 -->
	<!-- <jee:jndi-lookup id="dataSourceJNDI" jndi-name="/jdbc/oracleDS" resource-ref="true"/> -->
	
	<!-- 事务管理 此配置为注解方式 -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 注意，这里用的是Hibernate的事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>
	
	<!-- JavaMailSenderImpl对象 -->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${email.server.host}" />
		<property name="username" value="${email.sender.username}" />
		<property name="password" value="${email.sender.password}" />
		<property name="defaultEncoding" value="UTF-8" />
		<property name="javaMailProperties">
			<props>
				<!-- 设置认证开关 -->
				<prop key="mail.smtp.auth">${mail.smtp.auth}</prop>
				<!-- 启动调试开关 -->
				<prop key="mail.debug">${mail.debug}</prop>
				<!-- 设置发送延时 -->
				<prop key="mail.smtp.timeout">${mail.smtp.timeout}</prop>
				<prop key="mail.transport.protocol">${mail.transport.protocol}</prop> 
				<prop key="mail.smtp.auth.ntlm.domain">${mail.smtp.auth.ntlm.domain}</prop>  
			</props>
		</property>
	</bean>
	<!-- FTP配置 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">  
        <!-- 指定所上传文件的总大小不能超过20000KB..... -->  
        <property name="maxUploadSize" value="${ris.ftp.fileSize.maxUploadSize}" />  
	</bean>
	<!-- ftp client 工厂类 -->
	<bean id="ftpClientFactory" class="com.hdrs.support.ftp.FtpClientFactory">
		<constructor-arg>
			<bean class="com.hdrs.support.ftp.FtpClientConfigureDTO" 
			p:host="${ris.ftp.server.host}" 
			p:port="${ris.ftp.server.port}" 
			p:userName="${ris.ftp.client.userName}" 
			p:password="${ris.ftp.client.password}" 
			p:encoding="${ris.ftp.client.encoding}"
			p:clientTimeout="${ris.ftp.client.clientTimeout}">
			</bean>
		</constructor-arg>
	</bean>
	 <!-- ftp client pool 配置 -->
	<bean id="ftpClientPoolConfig" class="org.apache.commons.pool2.impl.GenericObjectPoolConfig"  
	p:maxTotal="${ftpClientPoolConfig.maxTotal}" 
	p:lifo="${ftpClientPoolConfig.lifo}" 
	p:maxWaitMillis="${ftpClientPoolConfig.maxWaitMillis}" 
	p:minIdle="${ftpClientPoolConfig.minIdle}" 
	p:maxIdle="${ftpClientPoolConfig.maxIdle}"/>
	<!-- ftp client 连接池 -->  
	<bean id="ftpClientPool" class="com.hdrs.support.ftp.FtpClientPool" init-method="initPool">
		<constructor-arg ref="ftpClientPoolConfig" />
		<constructor-arg ref="ftpClientFactory" />
	</bean>
	
	<!-- 20181107 session共享 start-->
	<!-- 使用Spring配置JedisPoolConfig对象 -->
	<bean id="poolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<!-- 最大空闲数 -->
		<property name="maxIdle" value="300" />
		<!-- 最大连接数 -->
		<property name="maxTotal" value="100" />
		<!-- 最大等待时间 -->
		<property name="maxWaitMillis" value="20000" />
	</bean>
	<!-- 配置JedisConnectionFactory -->
	<bean id="connectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<!-- hostName:服务器  默认值是localhost -->
		<property name="hostName" value="127.0.0.1" />
		<!-- Port：端口号  默认值是6379 -->
		<property name="port" value="6379" />
		<!-- password:连接redis时所需要的密码 -->
		<property name="password" value="123456" />
		<!-- poolConfig:连接池配置对象 -->
		<property name="poolConfig" ref="poolConfig" />
	</bean>
	<!-- Put session into redis 1800秒 30分钟-->
	<bean id="redisHttpSessionConfiguration" class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
	   <property name="maxInactiveIntervalInSeconds" value="18000" />
	   <property name="cookieSerializer" ref="defaultCookieSerializer"/>
	</bean>

	<!-- 设置Cookie domain 和 名称 -->
	<bean id="defaultCookieSerializer" class="org.springframework.session.web.http.DefaultCookieSerializer">
	   <!-- <property name="domainName" value="${session.domain}"/> -->
	   <property name="cookieName" value="SESSION"/>
	   <property name="cookiePath" value="/" />
	   <!-- <property name="domainNamePattern" value="^.+?\.(\w+\.[a-z]+)$"></property> -->
	</bean>
	<!-- 20181107 session共享 end-->
</beans>